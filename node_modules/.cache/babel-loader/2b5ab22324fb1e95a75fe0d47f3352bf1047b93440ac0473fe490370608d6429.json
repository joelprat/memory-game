{"ast":null,"code":"import{createContext,useContext,useEffect,useState}from\"react\";import{getShuffledOptions,TABLE_SIZE}from\"../utils/generateRandomBoard\";import{jsx as _jsx}from\"react/jsx-runtime\";const initialStoreValues={handleOpenCards:newCard=>{},updatePlayer1Name:name=>{},updatePlayer2Name:name=>{},openedCards:[],visibleCards:[],playerTurn:true,board:[],player1Name:\"\",player2Name:\"\",player1Counter:0,player2Counter:0,isGameOver:false,resetStore:()=>{}};const StoreContext=/*#__PURE__*/createContext(initialStoreValues);export const StoreProvider=props=>{const[openedCards,setOpenedCards]=useState([]);const[visibleCards,setVisibleCards]=useState([]);const[playerTurn,changePlayerTurn]=useState(true);const[board,setBoard]=useState(getShuffledOptions());const[player1Name,setPlayer1Name]=useState(\"Player 1\");const[player2Name,setPlayer2Name]=useState(\"Player 2\");const[player1Counter,setPlayer1Counter]=useState(0);const[player2Counter,setPlayer2Counter]=useState(0);const[isGameOver,setIsGameOver]=useState(false);const updatePlayer1Name=name=>setPlayer1Name(name);const updatePlayer2Name=name=>setPlayer2Name(name);const handleOpenCards=newCard=>{if(visibleCards.some(visibleCard=>visibleCard===newCard.src)){return;}if(openedCards.length===2){setOpenedCards([]);}if(openedCards.length===1&&openedCards[0].index===newCard.index){return;}if(openedCards.length===1&&openedCards[0].index!==newCard.index&&openedCards[0].src===newCard.src){if(playerTurn){setPlayer1Counter(prev=>prev+1);}else{setPlayer2Counter(prev=>prev+1);}setVisibleCards(prev=>[...prev,newCard.src]);setOpenedCards([]);return;}if(openedCards.length===1&&openedCards[0].index!==newCard.index&&openedCards[0].src!==newCard.src){changePlayerTurn(prev=>!prev);}setOpenedCards(prev=>[...prev,newCard]);};useEffect(()=>{if(visibleCards.length===TABLE_SIZE*TABLE_SIZE/2){setIsGameOver(true);}},[visibleCards.length]);const resetStore=()=>{setOpenedCards([]);setVisibleCards([]);changePlayerTurn(true);setBoard(getShuffledOptions());setPlayer1Name(\"Player 1\");setPlayer2Name(\"Player 2\");setPlayer1Counter(0);setPlayer2Counter(0);setIsGameOver(false);};return/*#__PURE__*/_jsx(StoreContext.Provider,{value:{openedCards,handleOpenCards,visibleCards,playerTurn,board,player1Name,player2Name,updatePlayer1Name,updatePlayer2Name,player1Counter,player2Counter,isGameOver,resetStore},children:props.children});};export const useStore=()=>{const context=useContext(StoreContext);if(!context){throw new Error(\"useStore must be used within a StoreProvider\");}return context;};","map":{"version":3,"names":["createContext","useContext","useEffect","useState","getShuffledOptions","TABLE_SIZE","jsx","_jsx","initialStoreValues","handleOpenCards","newCard","updatePlayer1Name","name","updatePlayer2Name","openedCards","visibleCards","playerTurn","board","player1Name","player2Name","player1Counter","player2Counter","isGameOver","resetStore","StoreContext","StoreProvider","props","setOpenedCards","setVisibleCards","changePlayerTurn","setBoard","setPlayer1Name","setPlayer2Name","setPlayer1Counter","setPlayer2Counter","setIsGameOver","some","visibleCard","src","length","index","prev","Provider","value","children","useStore","context","Error"],"sources":["/Users/joel.prat/Documents/code/my-repos/memory-game/src/store/Store.tsx"],"sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Card } from \"../utils/types\";\nimport { getShuffledOptions, TABLE_SIZE } from \"../utils/generateRandomBoard\";\n\ninterface StoreContextType {\n  handleOpenCards: (newCard: Card) => void;\n  openedCards: Card[];\n  visibleCards: string[];\n  playerTurn: boolean; //true player 1, false player 2\n  board: string[];\n  player1Name: string;\n  player2Name: string;\n  updatePlayer1Name: (name: string) => void;\n  updatePlayer2Name: (name: string) => void;\n  player1Counter: number;\n  player2Counter: number;\n  isGameOver: boolean;\n  resetStore: () => void;\n}\n\nconst initialStoreValues: StoreContextType = {\n  handleOpenCards: (newCard: Card) => {},\n  updatePlayer1Name: (name: string) => {},\n  updatePlayer2Name: (name: string) => {},\n  openedCards: [],\n  visibleCards: [],\n  playerTurn: true,\n  board: [],\n  player1Name: \"\",\n  player2Name: \"\",\n  player1Counter: 0,\n  player2Counter: 0,\n  isGameOver: false,\n  resetStore: () => {},\n};\nconst StoreContext = createContext(initialStoreValues);\n\nexport const StoreProvider = (props: { children: ReactNode }) => {\n  const [openedCards, setOpenedCards] = useState<Card[]>([]);\n  const [visibleCards, setVisibleCards] = useState<string[]>([]);\n  const [playerTurn, changePlayerTurn] = useState(true);\n  const [board, setBoard] = useState<string[]>(getShuffledOptions());\n  const [player1Name, setPlayer1Name] = useState(\"Player 1\");\n  const [player2Name, setPlayer2Name] = useState(\"Player 2\");\n  const [player1Counter, setPlayer1Counter] = useState(0);\n  const [player2Counter, setPlayer2Counter] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const updatePlayer1Name = (name: string) => setPlayer1Name(name);\n  const updatePlayer2Name = (name: string) => setPlayer2Name(name);\n\n  const handleOpenCards = (newCard: Card) => {\n    if (visibleCards.some((visibleCard) => visibleCard === newCard.src)) {\n      return;\n    }\n\n    if (openedCards.length === 2) {\n      setOpenedCards([]);\n    }\n\n    if (openedCards.length === 1 && openedCards[0].index === newCard.index) {\n      return;\n    }\n\n    if (\n      openedCards.length === 1 &&\n      openedCards[0].index !== newCard.index &&\n      openedCards[0].src === newCard.src\n    ) {\n      if (playerTurn) {\n        setPlayer1Counter((prev) => prev + 1);\n      } else {\n        setPlayer2Counter((prev) => prev + 1);\n      }\n\n      setVisibleCards((prev) => [...prev, newCard.src]);\n      setOpenedCards([]);\n      return;\n    }\n\n    if (\n      openedCards.length === 1 &&\n      openedCards[0].index !== newCard.index &&\n      openedCards[0].src !== newCard.src\n    ) {\n      changePlayerTurn((prev) => !prev);\n    }\n\n    setOpenedCards((prev) => [...prev, newCard]);\n  };\n\n  useEffect(() => {\n    if (visibleCards.length === (TABLE_SIZE * TABLE_SIZE) / 2) {\n      setIsGameOver(true);\n    }\n  }, [visibleCards.length]);\n\n  const resetStore = () => {\n    setOpenedCards([]);\n    setVisibleCards([]);\n    changePlayerTurn(true);\n    setBoard(getShuffledOptions());\n    setPlayer1Name(\"Player 1\");\n    setPlayer2Name(\"Player 2\");\n    setPlayer1Counter(0);\n    setPlayer2Counter(0);\n    setIsGameOver(false);\n  };\n\n  return (\n    <StoreContext.Provider\n      value={{\n        openedCards,\n        handleOpenCards,\n        visibleCards,\n        playerTurn,\n        board,\n        player1Name,\n        player2Name,\n        updatePlayer1Name,\n        updatePlayer2Name,\n        player1Counter,\n        player2Counter,\n        isGameOver,\n        resetStore,\n      }}\n    >\n      {props.children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useStore = () => {\n  const context = useContext(StoreContext);\n  if (!context) {\n    throw new Error(\"useStore must be used within a StoreProvider\");\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}